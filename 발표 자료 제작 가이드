소개시간
(스터디 소개)
스터디 목표 - 구체적으로 무엇을 배우는 스터디인가(+예시)
스터디 기대효과 - 스터디를 완료하면 무엇을 알 수 있는가(+예시)
스터디 방법 - 따라하고, 함께하고, 완성한다.

(리더)
이름
경력(약력 또는 학력)
간단한 인사말

(멤버)
이름
스터디목표(동기)
간단한 인사말

*스터디 소개 및 자기소개는 자칫 너무 길어질 수 있으므로 최소한 항목을 주고, 자기소개 시간은 한명 당 1분 정도?에서 끊을 수 있도록 구성

---------------------------------------------------------------------------------------

복습시간

복습 시간

복습 시간은 지난 시간 배웠던 핵심 주제에 대해 스터디원들이 직접 고민해서 이야기해보는 시간입니다. 
(핵심 주제는 학생 자료 ’핵심 복습란’과 일치. 학생 자료의 ‘핵심 복습란’은 수업 말미에 각자 작성하기를 권장. 어려울 시에는 개인별로 수업 이후에 작성.)
아래의 흐름대로 슬라이드를 구성하기를 권장합니다.
2번 슬라이드 같은 경우는 리더가 수정할 수 있도록 고안하여 제작합니다.


1.지난 시간으로부터 복습해야 할 핵심 주제 (3~4가지)를 보여줍니다. 

ex) 파이썬, 장고, HTML, CSS / 변수, 조건문, 리스트

2.각 주제별로 한명씩 담당하여 자신의 한 줄 요약을 말합니다  (이 때, 3명 미만의 학생이 ‘핵심 복습’을 작성했다면, 다음으로 넘어갑니다.)

ex) 파이썬 - 두희 / 장고 - 도근 / HTML - 진문, 헌영 / CSS - 슬아, 가현

3.리더가 주제에 대하여 한 줄로 요약하여 설명합니다. 

4.이번 시간의 내용의 연장되는 포인트를 짚어주어도 좋습니다. (선택)

5.지난 시간 수업 내용에 대해 자유롭게 질문 받습니다.

---------------------------------------------------------------------------------------

프로젝트 소개

---------------------------------------------------------------------------------------

이론설명

이론 설명 제작 가이드
“문형, 헌형, 두희야. 이론부분은 이 원칙들을 지키면서 만들어줘. 이 가이드를 따라 제작하면 이론을 더 잘 이해시킬 수 있어.” - 이 말을 자신있게 할 수 있도록 가이드를 제작할 것

이론 설명 3원칙
1. 개념을 설명할 때 최소한의 단문과 그림만을 사용하여 확실하게 전달한다.  - 최대한 시각적으로 이해를 도와야 한다. 
- 자세한 설명은 발표용 ppt에 필요없으며 학생용자료에 담도록 한다.
2. 개념 설명도 실습에 근거하여 필요성을 직접 느끼게한다. 
- 실습 속에서 필요성을 직접 느낄 때 개념을 가장 잘 이해할 수 있다.  - 개념을 배우는 목적을 확실하게 전달한다.
3. 정말 필요한 부분인지 다시 생각해본다. 
- 최종 결과물에 한번이라도 쓰이는 내용인가? 
- 지금 배우지 않으면 학습에 영향이 있거나, 지금 배우는것이 매우 효과적인가?
쉽거나 작은 개념을 설명할 때
e.g. img 태그를 배우는 경우, style 속성 1개를 배우는 경우
작은 개념 1개를 배워야할 때
ex1) 브라우저에서 탭의 타이틀은 어떤 원리로 지정될까?
이론 3원칙 적용
1. 예시 코드와 실제 사용 캡쳐화면 그림을 대응시켜 단번에 이해시킨다. 
- 실제 예제를 사진으로 보여주며 쉽게 이해시킨다.
2. title 태그 안의 ‘네이버’라는 글을 다른 글자로 바꿔보면서 브라우저의 타이틀이 실제로 바뀌는지 확인한다. 
- 직접 바꿔가며 실습으로 확인한다.
3. 페이스북을 만들며 각 페이지마다 타이틀을 지어줘야하기 때문에 반드시 필요하다. 
- html, css를 배우는 도중에 설명하면 자연스럽고 쉽게 이해할 수 있다.
   
 TIP
1. 매우 작은 개념이기 때문에 관련있는 다른 개념과 묶어 한번에 설명하거나 실습해도 좋다.  - head 태그, meta 태그 등에 대해 설명할 때 title을 함께 설명할 수 있다. 
- 동류의 개념과 함께 실습해볼 수 있다.
2. title을 지정하는 이유에 대해서는 굳이 언급을 안해도 상식적으로 충분히 그 목적과 쓰임을 유추할 수 있다. 이 경우 ppt에까지 사용 목적을 명시할 필요는 없다.
작은 개념을 한번에 여러개 배워야할 때
ex2) 12개의 기본 태그를 배울 때
   
 이론 3원칙 적용
1. HTML 태그의 용도가 element를 구성하기 위함을 알린다. 
- 네이버의 예제를 보여준다.
2. 12개의 태그를 리더를 따라 실습하며 체득한다. 
- 직접 작성하고 수초내로 결과를 확인하기 때문에 확실한 이해가 가능하며, 어떤 용도로 사용되는지 자연스
럽게 이해된다.
3. 페이스북을 만들기 위해 반드시 알아야할 최소의 태그다.
TIP
1. 작은개념여러개를배워야할경우,그리스트를미리보여주어배워야할총량을짐작할수있도록돕는다.  - 12개의 태그를 배울 것이라고 미리 고지한다. 그렇게 하지 않을 경우 멤버들의 집중력이 크게 떨어진다.
2. ppt가 길어질 경우 하단에 progress bar를 넣어준다.
다소 어려운 개념을 설명할 때
초보자가 이해하기 어려운 개념의 경우
ex3) 파이썬 자료형 중 리스트에 대한 설명
이론 3원칙 적용
1. ‘온갖 데이터를 담아두는 표’라는 표현 정도로 리스트를 이해시킨다.
2. 3일치 일기가 담긴 다이어리를 작성하기 위해 diray 리스트를 직접 만들어본다.
3. 게시판 즉 타임라인 구현에 반드시 필요하다.
TIP
1. 개념이 어려울 경우, 그 한개의 개념에 대한 실습을 여러개 구성해야 한다.  - 반복학습을 했을 때만 이해가 가능하다.
2. 어려운 개념일 수록 필요없는 부분을 과감하게 쳐낸다. 
- 리스트의 index, element 구성요소 등 설명하지 않은 중요한 내용이 많지만 장고를 만드는 일과는 직접적 인 관련이 없으므로 과감하게 쳐낸다.
3. 단계별로 이해할 수 있도록 구성한다. 
- 리스트 만들기 실습 => 리스트 내용물 for 출력 실습 => 리스트를 장고 템플릿으로 출력 실습({% for %})
  
 확인해볼 것
1. 개념 설명이 여러 페이지로 길어질 때 반드시 progress bar를 넣어준다.
2. 교육하기 원하는 이론보다 배우길 원하는 이론에 더욱 집중한다.
실습과제와의 관계
1. 이론 설명과 실습 과제는 긴밀한 관계에 있음을 인지해야 한다.
2. 습득한 개념들은 빠른 시간내에 실습 과제로 사용해 볼 수 있어야 한다.
3. 초보자의 수준을 고려하여, 자연스럽게 익힐 수 있도록 실습과제를 단계별로 설정한다.

---------------------------------------------------------------------------------------

실습과제

실습 과제 제작 가이드
======

1. 처음 나온 개념 중 코드로 작성 가능한 것은 꼭 바로 실습하여야 한다.
------
- 개념의 단위는 “속성이 크게 달라 입문자가 기존 지식으로 응용이 불가능한 것”으로 한다.

 - ex) h1 태그와 b 태그는 여는 태그와 닫는 태그로 구성되어 있고 텍스트의 변화가 시각적으로 드러나므로 같은 개념으로 간주한다. 이러한 경우 받아들일 수 있는 선에서 적당히 묶어 실습한다.
 - ex) 리턴값이 없는 함수와 있는 함수는 활용 방식과 활용도가 크게 차이나므로 다른 개념으로 간주한다.


2. 이론 설명과 명확히 구분하여야 한다.
------
- 이론 설명과 실습은 매우 유기적으로 구성되나 설명을 꼭 들어야 하는 시간에 타이핑을 하는 경우 학습 효과가 떨어진다.
- 발표자료 상에 “실습용 코드” 딱지를 붙이는 등 타이핑해야할 시간과 그렇지 않은 시간을 잘 구분해준다.
- 반대로 미처 코딩을 끝내지 못해 다음 이론 설명을 놓치게 되면 스터디원이 뒤처지는 느낌을 강하게 받고 포기할 확률이 높으므로 작은 단위로 확실히 마무리해준다.

 - ex) 설명 코드는 필요 부분만 확대하고 보조선이나 참고 사진을 활용하여 설명에 집중할 수 있게 한다.
 - ex) 실습 코드는 코드 가독성과 집중도가 높도록 디자인한다. 가능한 한 결과를 바로 확인할 수 있도록 한다.


3. 무의미한 타이핑은 없어야 한다.
------
- 코딩 교육에서 가장 흥미가 떨어지는 순간이 명확한 이해가 동반되지 않는 타이핑이다.
- 짧은 코딩 이후 자주 눈으로 확인할 수 있도록 유의하여 구성한다.
- 이해가 필요없는 경우나 이미 알고 있는 개념이 많이 등장하는 코드의 경우 미리 제작하여 필요한 부분만 비워놓고 제공한다.

 - ex) 배스킨라빈스 31을 만들 때 게임을 완성시키는 코딩 대신 조건문, 반복문에 대해 이해할 수 있는 실습을 만든다.
 - ex) Android Adapter의 getView의 경우 LayoutInflater에 대한 이해가 불가능하기 때문에 ViewHolder 작성 부분만 비워놓고 복사할 수 있도록 제공한다. (학생자료를 스터디시간에도 사용하는지 헷갈림)

기타 유의 사항
------

1. 라이브 코딩보다 완성된 코드 화면을 제시하는 것을 우선한다.
 - 라이브 코딩의 경우 스터디원의 집중력이 떨어지며 스터디 리더의 마우스 움직임 등에 방해를 받는다.
 - 작성 방식이 기존과 달리 새롭거나 작성 단위가 큰 경우 돌아다니며 확인한다.

2. 어떤 파일의 어떤 부분에 들어가는지 정확히 명시한다.

3. 스캐폴딩, 프로젝트 세팅 등 이해를 동반하지 않으나 꼭 경험해봐야 할 일의 경우 수행 이유를 충분히 설명하며 다운로드, 설치 시간등을 메울 수 있는 흥미 요소를 미리 준비한다.

4. 스터디 초반부터 자동완성 방법을 숙련시켜 타이핑 시간과 오타를 줄인다.

5. 새로운 개념으로 대체되어 기존 코드가 삭제되는 경우 삭제 범위와 이유를 정확히 언급한다.

---------------------------------------------------------------------------------------

도전과제

---------------------------------------------------------------------------------------

공지사항

*공지종류
스터디 과제에 대한 공지
스터디 내용에 대한 공지(예상 대비 정정)
스터디 시간/장소 변경에 대한 공지
스터디 외 행사에 대한 공지
Meeta 전체 공지

(리더)
스터디 공지사항은 항상 스터디 전 확인한다.
스터디 관련 공지사항은 당일 스터디가 종료할 때 한다. - 지각자가 있는 경우 공지사항을 못들을 수 있으므로

(매니저)
공지사항이 생기는 경우 공지사항 시트에 등록한다.


